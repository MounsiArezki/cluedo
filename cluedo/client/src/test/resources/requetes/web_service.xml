<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="da6dd7ae-d344-4dc9-ac3c-c484f4c02dde" activeEnvironment="Default" name="projetS2Inscription" resourceRoot="" soapui-version="5.5.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:restMockService id="100011a2-9cae-4dcf-bfa8-5302f36d9986" port="8089" path="/" host="ITEM-S80934" name="REST MockService 1">
    <con:settings/>
    <con:properties/>
    <con:restMockAction name="" method="POST" resourcePath="" id="c5d4cba8-320a-4e08-9ee6-ffd39621b766">
        <con:settings/>
        <con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <con:dispatchStyle>SEQUENCE</con:dispatchStyle>
        <con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath>
    <con:response name="Response 1" id="d1c51e08-2117-4312-b1de-fa69351f09e1" httpResponseStatus="201" mediaType="application/json">
        <con:settings/>
        <con:responseContent>{"id":"1","pseudo":"user"}</con:responseContent>
    </con:response>
</con:restMockAction>
</con:restMockService>
    <con:properties/>
    <con:wssContainer/>
    <con:oAuth2ProfileContainer/>
    <con:oAuth1ProfileContainer/>
    <con:sensitiveInformation/>
</con:soapui-project>